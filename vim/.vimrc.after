set background=dark
color darcula
set guifont=BlexMonoNF:h14
set colorcolumn=80
set cursorline " highlight current line

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-x> :nohl<CR><C-l>

if !has('gui_running')
  set t_Co=256
endif

" Enable mouse scrolling
set mouse=a
set ttymouse=xterm

" Turn on spell check
set spell spelllang=en_us

" Turn on Writegood
exec 'WritegoodEnable'

" NERDTree File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

if has("unix")
  if (match(system("uname -s"), "Darwin") != -1)
    let g:easytags_file = '~/.my.ctags'
  else
    let g:easytags_file = '/vagrant/config/my.ctags'
  endif
endif

" Set up default macros
let @a='Gdd:%s/^.*=> //g
i:%s/\n/'', ''/g
i''ï¿½@7ï¿½kbï¿½kbï¿½kb'
let @b='Gddï¿½khï¿½krï¿½krï¿½krggï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krdï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krï¿½krGï¿½@7d:$ï¿½kb%s/\n/'', ''/g
i''ï¿½@7ï¿½kbï¿½kbï¿½kb'
let @c=':%s/^  \d* - //g
:%s/ - .*\n/'', ''/g
i''ï¿½@7ï¿½kbï¿½kbï¿½kb'
let @d=':%s/\n/'', ''/g
i''ï¿½@7ï¿½kbï¿½kbï¿½kbï¿½kbï¿½kbï¿½kbvdV'
let @e=':%s/NULL /TOTAL/g
:%s/^(.*\n\n//g
:%s/--* -/------- | /g
:%s/  \+/ | /g
:%s/DocTypeName /DocTypeName | /g
:%s/FileExtension /FileExtension | /g
'

" Rename tmux window to the dir open in vim
" let dirs = split (expand("%:p:h"), "/")
" autocmd BufEnter * call system("tmux rename-window " . dirs[len(dirs) - 1])
"" autocmd VimLeave * call system("tmux rename-window zsh")
" autocmd BufEnter * let &titlestring = ' ' . expand("%:t")
" set title

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('markdown', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('rb', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

" Fuction to format xml files with xml lint
" http://vim.wikia.com/wiki/Pretty-formatting_XML
function! DoFormatXML() range
  " Save the file type
  let l:origft = &ft

  " Clean the file type
  set ft=

  " Add fake initial tag (so we can process multiple top-level elements)
  exe ":let l:beforeFirstLine=" . a:firstline . "-1"
  if l:beforeFirstLine < 0
    let l:beforeFirstLine=0
  endif
  exe a:lastline . "put ='</PrettyXML>'"
  exe l:beforeFirstLine . "put ='<PrettyXML>'"
  exe ":let l:newLastLine=" . a:lastline . "+2"
  if l:newLastLine > line('$')
    let l:newLastLine=line('$')
  endif

  " Remove XML header
  exe ":" . a:firstline . "," . a:lastline . "s/<\?xml\\_.*\?>\\_s*//e"

  " Recalculate last line of the edited code
  let l:newLastLine=search('</PrettyXML>')

  " Execute external formatter
  exe ":silent " . a:firstline . "," . l:newLastLine . "!xmllint --noblanks --format --recover -"

  " Recalculate first and last lines of the edited code
  let l:newFirstLine=search('<PrettyXML>')
  let l:newLastLine=search('</PrettyXML>')

  " Get inner range
  let l:innerFirstLine=l:newFirstLine+1
  let l:innerLastLine=l:newLastLine-1

  " Remove extra unnecessary indentation
  exe ":silent " . l:innerFirstLine . "," . l:innerLastLine "s/^  //e"

  " Remove fake tag
  exe l:newLastLine . "d"
  exe l:newFirstLine . "d"

  " Put the cursor at the first line of the edited code
  exe ":" . l:newFirstLine

  " Restore the file type
  exe "set ft=" . l:origft
endfunction
command! -range=% FormatXML <line1>,<line2>call DoFormatXML()

nmap <silent> <leader>x :%FormatXML<CR>
vmap <silent> <leader>x :FormatXML<CR>

" My shortcut keys
map <leader>sc :set spell spelllang=en_us<CR>
map <leader>snp :set nopaste<CR>
map <leader>sp  :set paste<CR>
map <leader>noh :noh<CR>
map <leader>nsc :set nospell<CR>
